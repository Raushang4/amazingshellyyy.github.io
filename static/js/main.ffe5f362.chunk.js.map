{"version":3,"sources":["logo.svg","Components/Intro/Intro.js","Components/Projects/ProjectCard.js","Components/Projects/Projects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Intro","props","Row","className","Col","xs","Provider","value","size","href","ProjectCard","Card","Image","variant","src","project","image","style","Height","fluid","Body","Title","title","lineHeight","subtitle","fontSize","paddingLeft","tech","time","note","date","gitHub","link","Projects","displayProjects","projects","map","id","key","this","React","Component","App","minHeight","backgroundColor","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"62FAAAA,EAAOC,QAAU,IAA0B,kC,qMCyB5BC,EApBD,SAAAC,GACZ,OACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,QACb,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACT,kBAACD,EAAA,EAAD,CAAKC,GAAI,GAAIF,UAAU,eACrB,4CACA,uDACA,kBAAC,IAAYG,SAAb,CAAsBC,MAAO,CAACC,KAAM,QAClC,uBAAGC,KAAK,sCAAqC,kBAAC,IAAD,OAC7C,uBAAGA,KAAK,gDAA+C,kBAAC,IAAD,OACvD,uBAAGA,KAAK,8CAA6C,kBAAC,IAAD,OACrD,uBAAGA,KAAK,0DAAyD,kBAAC,IAAD,SAGrE,kBAACL,EAAA,EAAD,CAAKC,GAAI,M,wECaAK,EAxBK,SAAAT,GAClB,OACI,kBAACU,EAAA,EAAD,CAAMR,UAAU,kBACd,kBAACS,EAAA,EAAD,CAAOC,QAAQ,MAAMC,IAAKb,EAAMc,QAAQC,MAAOC,MAAO,CAAEC,OAAQ,QAAUC,OAAK,IAC/E,kBAACR,EAAA,EAAKS,KAAN,KACE,kBAACT,EAAA,EAAKU,MAAN,KAAapB,EAAMc,QAAQO,OAC3B,uBAAGnB,UAAU,aAAac,MAAO,CAACM,WAAY,WAAYtB,EAAMc,QAAQS,UACxE,wBAAIP,MAAO,CAACQ,SAAU,SAAUC,YAAY,SAC1C,qCAAWzB,EAAMc,QAAQY,MACxB1B,EAAMc,QAAQa,MAAQ,qCAAW3B,EAAMc,QAAQa,MAChD,wCAAc3B,EAAMc,QAAQc,MAC5B,qCAAW5B,EAAMc,QAAQe,OAE3B,kBAAC,IAAYxB,SAAb,CAAsBC,MAAO,CAACC,KAAK,QACnC,uBAAGC,KAAMR,EAAMc,QAAQgB,QAAS,kBAAC,IAAD,OAE/B9B,EAAMc,QAAQiB,MAAQ,uBAAGvB,KAAMR,EAAMc,QAAQiB,MAAM,kBAAC,IAAD,WCA/CC,G,iNAfbC,gBAAgB,SAAAC,GACd,OAAOA,EAASC,KAAI,SAACrB,EAASsB,GAC5B,OAAO,kBAAC,EAAD,CAAaC,IAAKD,EAAItB,QAASA,Q,wEAIxC,OACE,yBAAKZ,UAAU,qBACZoC,KAAKL,gBAAgBC,Q,GAVPK,IAAMC,YCmBdC,MAjBf,WACE,OACE,oCACA,8BACE,mDAGA,yBAAKzB,MAAO,CAAE0B,UAAW,OAAQC,gBAAiB,YAChD,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,QAGF,kBAAC,EAAD,QCTYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAET,kBAAC,EAAD,MAEEC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ffe5f362.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport {Row, Col} from 'react-bootstrap';\nimport {IconContext} from 'react-icons';\nimport {IoLogoGithub,IoLogoLinkedin,IoMdCalendar,IoIosDocument} from 'react-icons/io'\n\nconst Intro = props => {\n  return(\n    <Row className=\"pt-5\">\n      <Col xs={1}></Col>\n      <Col xs={10} className=\"text-center\">\n        <h2>Shelly Cheng</h2>\n        <p>I am a Software Engineer</p>\n        <IconContext.Provider value={{size: \"2em\"}}>\n          <a href=\"https://github.com/amazingshellyyy\"><IoLogoGithub/></a>\n          <a href=\"https://www.linkedin.com/in/amazingshellyyy/\"><IoLogoLinkedin/></a>\n          <a href=\"https://calendly.com/amazingshellyyy/30min\"><IoMdCalendar/></a>\n          <a href=\"https://amazingshellyyy.com/resume/Shelly_Cheng_FE.pdf\"><IoIosDocument/></a>\n        </IconContext.Provider>\n      </Col>\n      <Col xs={1}></Col>\n    </Row>\n  )\n}\n\n\nexport default Intro;","import React from 'react';\nimport { Col, Card, Button, Image, ListGroup } from 'react-bootstrap';\nimport {IconContext} from 'react-icons';\nimport { IoLogoGithub } from \"react-icons/io\";\nimport {MdOpenInBrowser} from 'react-icons/md';\n\n\n\nconst ProjectCard = props => {\n  return (\n      <Card className=\"card-component\">\n        <Image variant=\"top\" src={props.project.image} style={{ Height: \"30vh\" }} fluid />\n        <Card.Body>\n          <Card.Title>{props.project.title}</Card.Title>\n          <p className=\"text-muted\" style={{lineHeight: \"1.2rem\"}}>{props.project.subtitle}</p>\n          <ul style={{fontSize: \"0.8rem\", paddingLeft:\"15px\"}}>\n            <li>Tech: {props.project.tech}</li>\n            {props.project.time && <li>Time: {props.project.time}</li>}\n            <li>Project: {props.project.note}</li>\n            <li>Date: {props.project.date}</li>\n          </ul>\n          <IconContext.Provider value={{size:\"2em\"}}>\n          <a href={props.project.gitHub} ><IoLogoGithub/></a>\n          \n          {props.project.link && <a href={props.project.link}><MdOpenInBrowser/></a>}\n          </IconContext.Provider>\n          \n        </Card.Body>\n      </Card>\n  )\n}\n\nexport default ProjectCard;","import React from 'react';\nimport projects from '../../projects.json';\nimport {Row} from 'react-bootstrap';\nimport ProjectCard from './ProjectCard'\nimport './project.scss';\n\n\nclass Projects extends React.Component{\n\n  displayProjects=projects=>{\n    return projects.map((project, id) => {\n      return <ProjectCard key={id} project={project}/>\n    })\n  }\n  render(){\n    return(\n      <div className=\"project-component\">\n        {this.displayProjects(projects)}\n      </div>\n    )\n  }\n \n}\n\nexport default Projects;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Container } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NavBar from './Components/NavBar/NavBar';\nimport Intro from './Components/Intro/Intro';\nimport Projects from './Components/Projects/Projects'\n\nfunction App() {\n  return (\n    <>\n    <head>\n      <title>Amazingshellyyy</title>\n    </head>\n      {/* <NavBar/> */}\n      <div style={{ minHeight: \"30vh\", backgroundColor: \"#F0F4F8\" }}>\n        <Container >\n          <Intro />\n        </Container>\n      </div>\n        <Projects />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n\n<App />\n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}